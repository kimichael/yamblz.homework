apply plugin: 'com.android.application'

def keystorePropertiesFile = project.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "com.gcteam.yamblz.homework"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        temp {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
        }
        release {
            minifyEnabled true
            signingConfig signingConfigs.temp
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles fileTree('proguard').asList().toArray()
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

ext {
    support = '25.4.0'
    constraint_layout = '1.0.2'

    play_services = '8.4.0'
    evernote = '1.1.11'

    okhttp = '3.4.1'
    picasso = '2.5.2'
    retrofit = '2.3.0'
    glide = '3.7.0'

    butterknife = '8.7.0'

    rxbinding = '2.0.0'
    rxandroid = '2.0.1'
    rxjava = '2.1.1'

    junit = '4.12'
    mockito = '2.8.47'

    dagger = '2.11'
    daggerAnnotations = '1.0'

    roboelectric = '3.4'

    espresso = '3.0.0'
    testRunner = '1.0.0'

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    testCompile "junit:junit:${junit}"
    testCompile "org.mockito:mockito-core:${mockito}"

    compile "com.android.support:appcompat-v7:${support}"
    compile "com.android.support:preference-v7:${support}"
    compile "com.android.support:preference-v14:${support}"
    compile "com.android.support:design:${support}"
    compile "com.android.support.constraint:constraint-layout:${constraint_layout}"

    compile "com.evernote:android-job:${evernote}"
    compile "com.google.android.gms:play-services-gcm:${play_services}"
    compile "com.google.android.gms:play-services-location:${play_services}"
    compile "com.google.android.gms:play-services-maps:${play_services}"

    compile "com.squareup.retrofit2:retrofit:${retrofit}"
    compile "com.squareup.retrofit2:converter-gson:${retrofit}"
    compile "com.squareup.retrofit2:adapter-rxjava2:${retrofit}"
    compile "com.squareup.picasso:picasso:${picasso}"
    compile "com.squareup.okhttp3:logging-interceptor:${okhttp}"

    compile "io.reactivex.rxjava2:rxandroid:${rxandroid}"
    compile "io.reactivex.rxjava2:rxjava:${rxjava}"
    compile "com.jakewharton.rxbinding2:rxbinding:${rxbinding}"
    compile "com.jakewharton.rxbinding2:rxbinding-support-v4:${rxbinding}"
    compile "com.jakewharton.rxbinding2:rxbinding-appcompat-v7:${rxbinding}"
    compile "com.jakewharton:butterknife:${butterknife}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${butterknife}"

    compile "com.google.dagger:dagger:${dagger}"
    annotationProcessor "com.google.dagger:dagger-compiler:${dagger}"
    provided "javax.annotation:jsr250-api:${daggerAnnotations}"

    testCompile "org.robolectric:robolectric:${roboelectric}"

    androidTestCompile("com.android.support.test.espresso:espresso-core:${espresso}", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile "com.android.support.test.espresso:espresso-contrib:${espresso}"
    androidTestCompile "com.android.support.test:runner:${testRunner}"
}
